# Uncrustify 0.59

#
# General options
#

# The type of line endings
newlines                                 = lf     # auto/lf/crlf/cr

# The original size of tabs in the input
input_tab_size                           = 8        # number

# The size of tabs in the output (only used if align_with_tabs=true)
output_tab_size                          = 4        # number

# Control what to do with the UTF-8 BOM (recommed 'remove')
utf8_bom                                 = remove   # ignore/add/remove/force

#
# Indenting
#

# The number of columns to indent per level.
# Usually 2, 3, 4, or 8.
indent_columns                           = output_tab_size        # number

# How to use tabs when indenting code
# 0=spaces only
# 1=indent with tabs to brace level, align with spaces
# 2=indent and align with tabs, using spaces when not on a tabstop
indent_with_tabs                         = 0        # number

# Whether to indent strings broken by '\' so that they line up
indent_align_string                      = true    # false/true

# Spaces to indent 'case' from 'switch'
# Usually 0 or indent_columns.
indent_switch_case                       = indent_columns        # number

#
# Spacing options
#

# Add or remove space inside '{}'
sp_inside_braces_empty                   = add   # ignore/add/remove/force

# Add or remove space after the scope '+' or '-', as in '-(void) foo;' or '+(int) bar;'
sp_after_oc_scope                        = add   # ignore/add/remove/force

# Add or remove space between 'else' and '{' if on the same line
sp_else_brace                            = force   # ignore/add/remove/force

# Add or remove space between '}' and 'else' if on the same line
sp_brace_else                            = force   # ignore/add/remove/force

#
# Code alignment (not left column spaces/tabs)
#

# How to align the star in variable definitions.
#  0=Part of the type     'void *   foo;'
#  1=Part of the variable 'void     *foo;'
#  2=Dangling             'void    *foo;'
align_var_def_star_style                 = 2        # number

# How to align the '&' in variable definitions.
#  0=Part of the type
#  1=Part of the variable
#  2=Dangling
align_var_def_amp_style                  = 2        # number

# The threshold for aligning variable definitions (0=no limit)
align_var_def_thresh                     = 0        # number

# The gap for aligning variable definitions
align_var_def_gap                        = 0        # number

# The span for aligning on '=' in assignments (0=don't align)
align_assign_span                        = 1        # number

# The threshold for aligning on '=' in assignments (0=no limit)
align_assign_thresh                      = 0        # number

# Span for aligning parameters in an Obj-C message call on the ':' (0=don't align)
align_oc_msg_colon_span                  = 4        # number

# Aligning parameters in an Obj-C '+' or '-' declaration on the ':'
align_oc_decl_colon                      = true    # false/true

#
# Newline adding and removing options
#

# Whether to collapse empty blocks between '{' and '}'
nl_collapse_empty_body                   = true    # false/true

# Add or remove newline between function signature and '{'
nl_fdef_brace                            = remove   # ignore/add/remove/force

# Add or remove newline between 'if' and '{'
nl_if_brace                              = remove   # ignore/add/remove/force

# Add or remove newline between '}' and 'else'
nl_brace_else                            = remove   # ignore/add/remove/force

# Add or remove newline between 'else' and '{'
nl_else_brace                            = remove   # ignore/add/remove/force

# Add or remove newline between 'for' and '{'
nl_for_brace                             = remove   # ignore/add/remove/force

# Add or remove newline at the end of the file
#nl_end_of_file                           = force   # ignore/add/remove/force

# The number of newlines at the end of the file (only used if nl_end_of_file is 'add' or 'force')
#nl_end_of_file_min                       = 2        # number

#
# Positioning options
#



#
# Line Splitting options
#

# Try to limit code width to N number of columns
code_width                               = 132        # number

#
# Blank line options
#

# Whether to remove blank lines before '}'
eat_blanks_before_close_brace            = true    # false/true

#
# Code modifying options (non-whitespace)
#

# Add or remove braces on single-line 'if' statement. Will not remove the braces if they contain an 'else'.
mod_full_brace_if                        = add   # ignore/add/remove/force

# Make all if/elseif/else statements in a chain be braced or not. Overrides mod_full_brace_if.
# If any must be braced, they are all braced.  If all can be unbraced, then the braces are removed.
mod_full_brace_if_chain                  = false    # false/true

# If TRUE, will sort consecutive single-line '#include' statements [C/C++] and '#import' statements [Obj-C]
# This is generally a bad idea, as it may break your code.
mod_sort_include                         = true    # false/true

#
# Comment modifications
#

# Try to wrap comments at cmt_width columns
cmt_width                                = 120        # number


#
# Preprocessor options
#
